#ifndef SPICOMM_H
#define SPICOMM_H

#include <unistd.h>
#include <stdint.h>
#include <iostream>
#include <stdio.h>
#include <math.h>
#include <bcm2835.h>

using namespace std;

#define WORD_SIZE_READ          8U
#define WORD_SIZE_WRITE16       4U
#define WORD_SIZE_WRITE32       6U
#define R_STATUS_REGISTER       0b0100011100101000
#define R_RUN_REGISTER          0b0100100000001000
#define R_STATUS0_REGISTER      0b0100000000101000
#define R_STATUS1_REGISTER      0b0100000000111000
#define R_CONFIG0_REGISTER      0b0000011000001000
#define R_WR_LOCK_REGISTER      0b0100101111111000
#define R_AVGAIN_REGISTER       0b0000000010111000
#define R_BVGAIN_REGISTER       0b0000001010111000
#define R_CVGAIN_REGISTER       0b0000010010111000

#define R_AI_PCF_REGISTER       0b0010000010101000
#define R_AV_PCF_REGISTER       0b0010000010111000
#define R_AIRMS_REGISTER        0b0010000011001000
#define R_AVRMS_REGISTER        0b0010000011011000
#define R_AWATT_REGISTER        0b0010000100001000
#define R_AVAR_REGISTER         0b0010000100011000
#define R_AVA_REGISTER          0b0010000100101000
#define R_APF_REGISTER          0b0010000101101000
#define R_AWATTHR_HI_REGISTER   0b0010111001111000
#define R_AVARHR_HI_REGISTER    0b0010111100011000
#define R_AVAHR_HI_REGISTER     0b0010111110111000

#define R_BI_PCF_REGISTER       0b0010001010101000
#define R_BV_PCF_REGISTER       0b0010001010111000
#define R_BIRMS_REGISTER        0b0010001011001000
#define R_BVRMS_REGISTER        0b0010001011011000
#define R_BWATT_REGISTER        0b0010001100001000
#define R_BVAR_REGISTER         0b0010001100011000
#define R_BVA_REGISTER          0b0010001100101000
#define R_BPF_REGISTER          0b0010001101101000
#define R_BWATTHR_HI_REGISTER   0b0011001000111000
#define R_BVARHR_HI_REGISTER    0b0011001011011000
#define R_BVAHR_HI_REGISTER     0b0011001101111000

#define R_CI_PCF_REGISTER       0b0010010010101000
#define R_CV_PCF_REGISTER       0b0010010010111000
#define R_CIRMS_REGISTER        0b0010010011001000
#define R_CVRMS_REGISTER        0b0010010011011000
#define R_CWATT_REGISTER        0b0010010100001000
#define R_CVAR_REGISTER         0b0010010100011000
#define R_CVA_REGISTER          0b0010010100101000
#define R_CPF_REGISTER          0b0010010101101000
#define R_CWATTHR_HI_REGISTER   0b0011010111111000
#define R_CVARHR_HI_REGISTER    0b0011011010011000
#define R_CVAHR_HI_REGISTER     0b0011011100111000

#define W_RUN_REGISTER_START    0b01001000000000000000000000000001
#define W_RUN_REGISTER_STOP     0b01001000000000000000000000000000
#define W_AVGAIN_REGISTER       0b000000001011000000000000000000000000000000000000
#define W_BVGAIN_REGISTER       0b000000101011000000000000000000000000000000000000
#define W_CVGAIN_REGISTER       0b000001001011000000000000000000000000000000000000
#define W_VLEVEL_REGISTER       0b010000001111000000000000001000101110101000101000
#define W_ACCMODE_REGISTER      0b01001001001000000000000000000101
#define W_EP_CFG_REGISTER       0b01001011000000000000000000100001
#define W_PGA_GAIN_REGISTER     0b01001011100100000000000000000000
#define W_WTHR_REGISTER         0b01000010000000000010000011111111
#define W_VARTHR_REGISTER       0b01000010000100000010000011111111
#define W_VATHR_REGISTER        0b01000010001000000010000011111111
#define W_CF1DEN_REGISTER       0b01001001010000000010110001111100
#define W_CF2DEN_REGISTER       0b01001001010100000010110001111100
#define W_CF3DEN_REGISTER       0b01001001011000000010110001111100
#define W_CF4DEN_REGISTER       0b01001001011100000010110001111100
#define W_EGY_TIME_REGISTER	    0b01001011001000000000000111111111

#define VoltageConstant     	10.74705975
#define CurrentConstant     	2.683410674
#define PowerConstant       	3.870674811
#define EnergyConstant      	1.100991946
#define PIN 		        	RPI_BPLUS_GPIO_J8_37

class spiComm {
    public:
        spiComm();
        ~spiComm();
        float readCurrent(unsigned short word);
        float readVoltage(unsigned short word);
        float readPower(unsigned short word);
        float readEnergy(unsigned short word);


    private:
        int initSPI();
        void closeSPI();
        void resizeWord16(char byte[], unsigned short word);
        void resizeWord32(char byte[], unsigned int word);
        void resizeWord48(char byte[], uint64_t word);
        uint32_t parse32bitReturnValue(char byte[]);
        uint16_t parse16bitReturnValue(char byte[]);
        void writeSPI(unsigned int word);
        void writeSPIlong(uint64_t word);

};

#endif
